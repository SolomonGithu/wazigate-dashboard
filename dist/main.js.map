{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./node_modules/waziup/src/Waziup.ts","webpack:///./src/components/devices/Entity.tsx","webpack:///./src/components/Icon.tsx","webpack:///./src/components/Time.tsx","webpack:///./src/tools.tsx","webpack:///./src/components/Error.tsx","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./node_modules/waziup/index.ts","webpack:///./node_modules/waziup/src/connect.ts","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/waziup/node_modules/node-fetch/browser.js","webpack:///./src/version.ts","webpack:///./src/components/Dashboard.tsx","webpack:///./src/components/Devices.tsx","webpack:///./src/components/devices/Device.tsx","webpack:///./src/img/ontologies.svg","webpack:///./src/components/values/NumericValue.tsx","webpack:///./src/components/metas/LoRa.tsx","webpack:///./src/components/Apps.tsx","webpack:///./src/img/icons.svg","webpack:///./src/components/AppsProxy.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","univFetch","process","title","window","fetch","polishEntity","ent","modified","Date","created","time","polishDevice","device","sensors","forEach","actuators","polishValue","val","host","auth","this","id","devices","arg1","arg2","arguments","length","set","id1","id2","sensor","del","arg3","values","meta","actuator","cloud","paused","cred","status","stat","remote","wakeup","polishCloudStatus","app","path","cb","resp","toURL","ok","headers","startsWith","data","json","text","init","method","body","JSON","stringify","metaHandler","LoRaComp","EntComp","Component","props","super","state","open","togglePreview","handleValueChange","console","log","setState","ontKind","type","sensingDevices","kind","Value","className","IconComp","src","icon","label","NumericValueComp","metas","handler","Handler","push","entity","changeHandler","details","field","TimeComp","onClick","xlinkHref","getTime","toLocaleString","Math","round","content","ErrorComp","msg","error","match","slice","branch","version","isDemo","URLSearchParams","location","search","has","navigator","platform","indexOf","document","classList","add","waziup","connect","then","gateway","toProxyURL","ReactDOM","render","DashboardComp","getElementById","async","settings","Waziup","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","apply","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","global","self","getGlobal","default","Headers","Request","Response","appsRegExp","menu","item","href","target","items","onHandleHashChange","page","hash","loading","pending","addEventListener","load","dashboard","apps","getApps","file","wazigatePkg","hook","Promise","resolve","reject","script","createElement","head","appendChild","loadHook","completeHook","navigate","pageComp","DevicesPageComp","AppsPageComp","AppsProxyComp","map","getDevices","DeviceComp","handleNameClick","newName","prompt","onChange","activated","fieldML","deveui","nwkey","appeui"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = React;","/** @hidden */\r\nvar univFetch: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n\r\nif (process.title !== \"browser\") {\r\n    univFetch = require('node-fetch');\r\n} else {\r\n    univFetch = window.fetch;\r\n}\r\n\r\n/**\r\n * Every sensor, actuator and device can have metadata.\r\n * This is additional data that can be set by apps and by the Waziup system to provide\r\n * more information on this sensor or actuator.\r\n * \r\n * Use [[setSensorMeta]], [[setActuatorMeta]] and [[setDeviceMeta]] to modify the metadata.\r\n */\r\nexport type Meta = {\r\n    [key: string]: any;\r\n}\r\n\r\n/**\r\n * All sensors and actuators have a value (and historical values in the database).\r\n * \r\n * Depending on the sensor/actuator kind, the value can be any type.\r\n */\r\nexport type Value = any;\r\n/**\r\n * When reading and writing values some APIs return the the value and its timestamp.\r\n */\r\nexport type ValueWithTime = {\r\n    value: any;\r\n    time: Date;\r\n}\r\n\r\n/**\r\n * A sensor, actuator or device ID.\r\n */\r\nexport type ID = string;\r\n\r\n/**\r\n * A sensor always belongs to a device.\r\n */\r\nexport type Sensor = {\r\n    /** Unique sensor ID. */\r\n    id: ID;\r\n    /** Sensor name. */\r\n    name: string;\r\n    /** Sensor value. */\r\n    value: Value;\r\n    /** Sensor kind. */\r\n    kind: string;\r\n    /** Time at which the sensor was last modified. This includes changes of the name and metadata, but not the upload of new values (see [[time]] for that.). */\r\n    modified: Date;\r\n    /** Time at which the sensor was created. */\r\n    created: Date;\r\n    /** Time at which the last value was uploaded for this sensor. */\r\n    time: Date;\r\n    /** Sensor metadata. */\r\n    meta: Meta;\r\n}\r\n\r\n/**\r\n * An Actuator always belongs to a device.\r\n */\r\nexport type Actuator = {\r\n    /** Unique actuator ID. */\r\n    id: ID;\r\n    /** Actuator name. */\r\n    name: string;\r\n    /** Actuator value. */\r\n    value: Value;\r\n    /** Actuator kind. */\r\n    kind: string;\r\n    /** Time at which the actuator was last modified. This includes changes of the name and metadata, but not the upload of new values (see [[time]] for that.) */\r\n    modified: Date;\r\n    /** Time at which the actuator was created. */\r\n    created: Date;\r\n    /** Time at which the last value was uploaded for this actuator. */\r\n    time: Date;\r\n    /** Actuator metadata. */\r\n    meta: Meta;\r\n}\r\n\r\n/**\r\n * A device can have sensors and actuators.\r\n */\r\nexport type Device = {\r\n    /** Unique device ID. */\r\n    id: ID;\r\n    /** Device name. */\r\n    name: string;\r\n    /** Device sensors. */\r\n    sensors: Sensor[];\r\n    /** Device actuators. */\r\n    actuators: Actuator[];\r\n    /** Time at which the device was last modified. This includes changes of the name and metadata.*/\r\n    modified: Date;\r\n    /** Time at which the device was created. */\r\n    created: Date;\r\n    /** Device metadata. */\r\n    meta: Meta;\r\n}\r\n\r\n/**\r\n * Cloud Credentials.\r\n * \r\n * @category Clouds\r\n */\r\nexport type Credentials = {\r\n    username: string;\r\n    password: string;\r\n    token: string;\r\n}\r\n\r\n/**\r\n * @category Clouds\r\n */\r\nexport type Cloud = {\r\n    id: ID;\r\n    paused: boolean;\r\n    pausing: boolean;\r\n    pausing_mqtt: boolean;\r\n    rest: string;\r\n    mqtt: string;\r\n    credentials: Credentials,\r\n    statusCode: number;\r\n    statusText: string;\r\n}\r\n\r\n/**\r\n * @category Clouds\r\n */\r\nexport type CloudAction = \"create\" | \"modify\" | \"sync\" | \"error\" | \"delete\";\r\n\r\n/**\r\n * @category Clouds\r\n */\r\nexport type CloudStatus = {\r\n    entity: {\r\n        device: string;\r\n        sensor?: string;\r\n        actuators?: string;\r\n    },\r\n    status: {\r\n        action: CloudAction[];\r\n        remote: Date;\r\n        sleep: number;\r\n        wakeup: Date;\r\n    }\r\n}[];\r\n\r\nexport type Event = {\r\n    code: number;\r\n    msg: string;\r\n    time: Date;\r\n}\r\n\r\n/**\r\n * A Waziup App.\r\n * @category Apps\r\n */\r\nexport type App = {\r\n    name: string;\r\n    type: number;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * This class represents a client of the Waziup platform. The client is connected to a specific host: either the [Waziup Cloud](https://dashboard.waziup.io/) or a [Wazigate](https://www.waziup.io/documentation/wazigate/).\r\n * \r\n * From inside an App you can [[connect]] like this:\r\n * \r\n * ```ts\r\n *   var waziup = await require(\"waziup\")\r\n *   var gateway = await waziup.connect();\r\n *   var id = await gateway.getID();\r\n *   console.log(\"This Wazigate has the ID:\", id);\r\n * ```\r\n */\r\nexport class Waziup {\r\n\r\n    /** @hidden */\r\n    private host: string;\r\n    /** @hidden */\r\n    private auth: string;\r\n\r\n    /**\r\n     * Construct a new Waziup API client that connects to a given host (either a Wazigate or Waziup Cloud).\r\n     * The auth token must be received by proceeding the login procedure first.\r\n     * \r\n     * **Use the [[connect]] function to create a new Waziup client for you!**\r\n     * \r\n     * @param host hostname, like \"waziup.io\" or an IP address.\r\n     * @param auth login token, recieved by the Gateway or Waziup Cloud.\r\n     * \r\n     * @hidden\r\n     */\r\n    constructor(host: string, auth: string) {\r\n        this.host = host;\r\n        this.auth = auth;\r\n    }\r\n\r\n    /**\r\n     * Get the ID of the Waziup device. *Use on Wazigates only!*\r\n     */\r\n    async getID(): Promise<ID> {\r\n        return this.get<ID>(\"device/id\");\r\n    }\r\n\r\n    /**\r\n     * Get the device with this ID.\r\n     */\r\n    async getDevice(id?: ID): Promise<Device>;\r\n    /**\r\n     * Get the Wazigate device.\r\n     */\r\n    async getDevice(): Promise<Device>;\r\n    async getDevice(id?: ID): Promise<Device> {\r\n        if (!id) {\r\n            var device = await this.get<Device>(\"device\");\r\n        } else {\r\n            var device = await this.get<Device>(`devices/${id}`);\r\n        }\r\n        polishDevice(device);\r\n        return device;\r\n    }\r\n\r\n    /**\r\n     * Get all the declared devices.\r\n     */\r\n    async getDevices(): Promise<Device[]> {\r\n        var devices = await this.get<Device[]>(\"devices\");\r\n        devices.forEach(polishDevice);\r\n        return devices;\r\n    }\r\n\r\n    /**\r\n     * Get the name of a device.\r\n     */\r\n    async getDeviceName(device: ID): Promise<string>;\r\n    /**\r\n     * Get the name of this device. *Use on Wazigates only!*\r\n     */\r\n    async getDeviceName(): Promise<string>;\r\n    async getDeviceName(id?: ID): Promise<string> {\r\n        if (id) {\r\n            var name = await this.get<string>(`device/${id}/name`);\r\n        } else {\r\n            var name = await this.get<string>(`device/name`);\r\n        }\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Set the name of a device.\r\n     */\r\n    async setDeviceName(device: ID, name: string): Promise<void>;\r\n    /**\r\n     * Set the name of this device. *Use on Wazigates only!*\r\n     */\r\n    async setDeviceName(name: string): Promise<void>;\r\n    async setDeviceName(arg1: ID | string, arg2?: string): Promise<void> {\r\n        if (arguments.length === 2) {\r\n            await this.set(`device/${arg1}/name`, arg2);\r\n        } else {\r\n            await this.set(`device/name`, arg1);\r\n        }\r\n    }\r\n\r\n    //////////////////////////////////////////////////\r\n    // Sensors\r\n\r\n    /**\r\n     * Get all sensors of the device with the given ID.\r\n     */\r\n    async getSensors(device?: ID): Promise<Sensor[]>;\r\n    /**\r\n     * Get all sensors of the Wazigate. *Use on Wazigates only!*\r\n     */\r\n    async getSensors(): Promise<Sensor[]>;\r\n    async getSensors(id?: ID): Promise<Sensor[]> {\r\n        if (!id) {\r\n            var sensors = await this.get<Sensor[]>(\"sensors\");\r\n        } else {\r\n            var sensors = await this.get<Sensor[]>(`devices/${id}/sensors`);\r\n        }\r\n        sensors.forEach(polishEntity);\r\n        return sensors;\r\n    }\r\n\r\n    /**\r\n     * Get a sensor of a specific device.\r\n     */\r\n    async getSensor(device: ID, sensor: ID): Promise<Sensor>;\r\n    /**\r\n     * Get a sensor of the Wazigate. *Use on Wazigates only!*\r\n     */\r\n    async getSensor(sensor: ID): Promise<Sensor>;\r\n    async getSensor(id1: ID, id2?: ID): Promise<Sensor> {\r\n        if (!id2) {\r\n            var sensor = await this.get<Sensor>(`sensors/${id1}`);\r\n        } else {\r\n            var sensor = await this.get<Sensor>(`devices/${id1}/sensors/${id2}`);\r\n        }\r\n        polishEntity(sensor);\r\n        return sensor;\r\n    }\r\n\r\n    /**\r\n     * Declare a new new sensor to a specific device.\r\n     * @returns the ID of the new sensor.\r\n     */\r\n    async addSensor(device: ID, sensor: Sensor): Promise<ID>;\r\n    /**\r\n     * Declare a new sensor to the Wazigate. *Use on Wazigates only!*\r\n     * @returns the ID of the new sensor.\r\n     */\r\n    async addSensor(sensor: Sensor): Promise<ID>;\r\n    async addSensor(arg1: ID | Sensor, arg2?: Sensor): Promise<ID> {\r\n        if (!arg2) {\r\n            var id = await this.set<ID>(`sensor`, arg1);\r\n        } else {\r\n            var id = await this.set<ID>(`devices/${arg1}/sensors`, arg2);\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Delete a sensor of a specific device.\r\n     */\r\n    async deleteSensor(device: ID, sensor: ID): Promise<void>;\r\n    /**\r\n     * Delete a sensor of the Wazigate. *Use on Wazigates only!*\r\n     */\r\n    async deleteSensor(sensor: ID): Promise<void>;\r\n    async deleteSensor(id1: ID, id2?: ID): Promise<void> {\r\n        if (!id2) {\r\n            await this.del(`sensors/${id1}`);\r\n        } else {\r\n            await this.del(`devices/${id1}/sensors/${id2}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the last uploaded value of the sensor.\r\n     */\r\n    async getSensorValue(device: ID, sensor: ID): Promise<Value>;\r\n    /**\r\n     * Get the last uploaded value of the Wazigate-sensor. *Use on Wazigates only!*\r\n     */\r\n    async getSensorValue(sensor: ID): Promise<Value>;\r\n    async getSensorValue(id1: ID, id2?: ID): Promise<Value> {\r\n        if (!id2) {\r\n            var value = await this.get<Value>(`sensors/${id1}/value`);\r\n        } else {\r\n            var value = await this.get<Value>(`devices/${id1}/sensors/${id2}/value`);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Add (upload) a new value to the sensor.\r\n     */\r\n    async addSensorValue(device: ID, sensor: ID, value: Value | ValueWithTime): Promise<void>;\r\n    /**\r\n     * Add (upload) a new value to the Wazigate-sensor. *Use on Wazigates only!*\r\n     */\r\n    async addSensorValue(sensor: ID, value: Value | ValueWithTime): Promise<void>;\r\n    async addSensorValue(id1: ID, arg2: ID | Value | ValueWithTime, arg3?: Value | ValueWithTime): Promise<void> {\r\n        if(arguments.length === 2)  {\r\n            await this.set(`sensors/${id1}/value`, arg2);\r\n        } else {\r\n            await this.set(`devices/${id1}/sensors/${arg2}/value`, arg3);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get (read) uploaded sensor values.\r\n     */\r\n    async getSensorValues(device: ID, sensor: ID): Promise<Value>;\r\n    /**\r\n     * Get (read) uploaded sensor values of the Wazigate-sensor. *Use on Wazigates only!*\r\n     */\r\n    async getSensorValues(sensor: ID): Promise<Value>;\r\n    async getSensorValues(id1: ID, id2?: ID): Promise<Value> {\r\n        if (!id2) {\r\n            var values = await this.get<ValueWithTime[]>(`sensors/${id1}/values`);\r\n        } else {\r\n            var values = await this.get<ValueWithTime[]>(`devices/${id1}/sensors/${id2}/values`);\r\n        }\r\n        values.forEach(polishValue);\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * Add (upload) new values to the sensor.\r\n     */\r\n    async addSensorValues(device: ID, sensor: ID, values: Value[] | ValueWithTime[]): Promise<void>;\r\n    /**\r\n     * Add (upload) new values to the Wazigate-sensor. *Use on Wazigates only!*\r\n     */\r\n    async addSensorValues(sensor: ID, values: Value[] | ValueWithTime[]): Promise<void>;\r\n    async addSensorValues(id1: ID, arg2: ID | Value[] | ValueWithTime[], arg3?: Value[] | ValueWithTime[]): Promise<void> {\r\n        if(arguments.length === 2)  {\r\n            await this.set(`sensors/${id1}/values`, arg2);\r\n        } else {\r\n            await this.set(`devices/${id1}/sensors/${arg2}/values`, arg3);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set (override) a sensor's metadata.\r\n     */\r\n    async setSensorMeta(device: ID, sensor: ID, meta: Meta): Promise<void>;\r\n    /**\r\n     * Set (override) a Wazigate-sensor's metadata. *Use on Wazigates only!*\r\n     */\r\n    async setSensorMeta(sensor: ID, meta: Meta): Promise<void>;\r\n    async setSensorMeta(id1: ID, arg2: ID | Meta, arg3?: Meta): Promise<void> {\r\n        if(arguments.length === 2)  {\r\n            await this.set(`sensors/${id1}/meta`, arg2);\r\n        } else {\r\n            await this.set(`devices/${id1}/sensors/${arg2}/meta`, arg3);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a sensor's metadata.\r\n     */\r\n    async getSensorMeta(device: ID, sensor: ID): Promise<Meta>;\r\n    /**\r\n     * Get a Wazigate-sensor's metadata. *Use on Wazigates only!*\r\n     */\r\n    async getSensorMeta(sensor: ID): Promise<Meta>;\r\n    async getSensorMeta(id1: ID, id2?: ID): Promise<Meta> {\r\n        if(!id2)  {\r\n            var meta = await this.get<Meta>(`sensors/${id1}/meta`);\r\n        } else {\r\n            var meta = await this.get<Meta>(`devices/${id1}/sensors/${id2}/meta`);\r\n        }\r\n        return meta;\r\n    }\r\n\r\n    //////////////////////////////////////////////////\r\n    // Actuators\r\n\r\n        /**\r\n     * Get all actuators of the device with the given ID.\r\n     */\r\n    async getActuators(device?: ID): Promise<Actuator[]>;\r\n    /**\r\n     * Get all actuators of the Wazigate. *Use on Wazigates only!*\r\n     */\r\n    async getActuators(): Promise<Actuator[]>;\r\n    async getActuators(id?: ID): Promise<Actuator[]> {\r\n        if (!id) {\r\n            var actuators = await this.get<Actuator[]>(\"actuators\");\r\n        } else {\r\n            var actuators = await this.get<Actuator[]>(`devices/${id}/actuators`);\r\n        }\r\n        actuators.forEach(polishEntity);\r\n        return actuators;\r\n    }\r\n\r\n    /**\r\n     * Get a actuator of a specific device.\r\n     */\r\n    async getActuator(device: ID, actuator: ID): Promise<Actuator>;\r\n    /**\r\n     * Get a actuator of the Wazigate. *Use on Wazigates only!*\r\n     */\r\n    async getActuator(actuator: ID): Promise<Actuator>;\r\n    async getActuator(id1: ID, id2?: ID): Promise<Actuator> {\r\n        if (!id2) {\r\n            var actuator = await this.get<Actuator>(`actuators/${id1}`);\r\n        } else {\r\n            var actuator = await this.get<Actuator>(`devices/${id1}/actuators/${id2}`);\r\n        }\r\n        polishEntity(actuator);\r\n        return actuator;\r\n    }\r\n\r\n    /**\r\n     * Declare a new new actuator to a specific device.\r\n     * @returns the ID of the new actuator.\r\n     */\r\n    async addActuator(device: ID, actuator: Actuator): Promise<ID>;\r\n    /**\r\n     * Declare a new actuator to the Wazigate. *Use on Wazigates only!*\r\n     * @returns the ID of the new actuator.\r\n     */\r\n    async addActuator(actuator: Actuator): Promise<ID>;\r\n    async addActuator(arg1: ID | Actuator, arg2?: Actuator): Promise<ID> {\r\n        if (!arg2) {\r\n            var id = await this.set<ID>(`actuator`, arg1);\r\n        } else {\r\n            var id = await this.set<ID>(`devices/${arg1}/actuators`, arg2);\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Delete a actuator of a specific device.\r\n     */\r\n    async deleteActuator(device: ID, actuator: ID): Promise<void>;\r\n    /**\r\n     * Delete a actuator of the Wazigate. *Use on Wazigates only!*\r\n     */\r\n    async deleteActuator(actuator: ID): Promise<void>;\r\n    async deleteActuator(id1: ID, id2?: ID): Promise<void> {\r\n        if (!id2) {\r\n            await this.del(`actuators/${id1}`);\r\n        } else {\r\n            await this.del(`devices/${id1}/actuators/${id2}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the last uploaded value of the actuator.\r\n     */\r\n    async getActuatorValue(device: ID, actuator: ID): Promise<Value>;\r\n    /**\r\n     * Get the last uploaded value of the Wazigate-actuator. *Use on Wazigates only!*\r\n     */\r\n    async getActuatorValue(actuator: ID): Promise<Value>;\r\n    async getActuatorValue(id1: ID, id2?: ID): Promise<Value> {\r\n        if (!id2) {\r\n            var value = await this.get<Value>(`actuators/${id1}/value`);\r\n        } else {\r\n            var value = await this.get<Value>(`devices/${id1}/actuators/${id2}/value`);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Add (upload) a new value to the actuator.\r\n     */\r\n    async addActuatorValue(device: ID, actuator: ID, value: Value | ValueWithTime): Promise<void>;\r\n    /**\r\n     * Add (upload) a new value to the Wazigate-actuator. *Use on Wazigates only!*\r\n     */\r\n    async addActuatorValue(actuator: ID, value: Value | ValueWithTime): Promise<void>;\r\n    async addActuatorValue(id1: ID, arg2: ID | Value | ValueWithTime, arg3?: Value | ValueWithTime): Promise<void> {\r\n        if(arguments.length === 2)  {\r\n            await this.set(`actuators/${id1}/value`, arg2);\r\n        } else {\r\n            await this.set(`devices/${id1}/actuators/${arg2}/value`, arg3);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get (read) uploaded actuator values.\r\n     */\r\n    async getActuatorValues(device: ID, actuator: ID): Promise<Value>;\r\n    /**\r\n     * Get (read) uploaded actuator values of the Wazigate-actuator. *Use on Wazigates only!*\r\n     */\r\n    async getActuatorValues(actuator: ID): Promise<Value>;\r\n    async getActuatorValues(id1: ID, id2?: ID): Promise<Value> {\r\n        if (!id2) {\r\n            var values = await this.get<ValueWithTime[]>(`actuators/${id1}/values`);\r\n        } else {\r\n            var values = await this.get<ValueWithTime[]>(`devices/${id1}/actuators/${id2}/values`);\r\n        }\r\n        values.forEach(polishValue);\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * Add (upload) new values to the actuator.\r\n     */\r\n    async addActuatorValues(device: ID, actuator: ID, values: Value[] | ValueWithTime[]): Promise<void>;\r\n    /**\r\n     * Add (upload) new values to the Wazigate-actuator. *Use on Wazigates only!*\r\n     */\r\n    async addActuatorValues(actuator: ID, values: Value[] | ValueWithTime[]): Promise<void>;\r\n    async addActuatorValues(id1: ID, arg2: ID | Value[] | ValueWithTime[], arg3?: Value[] | ValueWithTime[]): Promise<void> {\r\n        if(arguments.length === 2)  {\r\n            await this.set(`actuators/${id1}/values`, arg2);\r\n        } else {\r\n            await this.set(`devices/${id1}/actuators/${arg2}/values`, arg3);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set (override) a actuator's metadata.\r\n     */\r\n    async setActuatorMeta(device: ID, actuator: ID, meta: Meta): Promise<void>;\r\n    /**\r\n     * Set (override) a Wazigate-actuator's metadata. *Use on Wazigates only!*\r\n     */\r\n    async setActuatorMeta(actuator: ID, meta: Meta): Promise<void>;\r\n    async setActuatorMeta(id1: ID, arg2: ID | Meta, arg3?: Meta): Promise<void> {\r\n        if(arguments.length === 2)  {\r\n            await this.set(`actuators/${id1}/meta`, arg2);\r\n        } else {\r\n            await this.set(`devices/${id1}/actuators/${arg2}/meta`, arg3);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a actuator's metadata.\r\n     */\r\n    async getActuatorMeta(device: ID, actuator: ID): Promise<Meta>;\r\n    /**\r\n     * Get a Wazigate-actuator's metadata. *Use on Wazigates only!*\r\n     */\r\n    async getActuatorMeta(actuator: ID): Promise<Meta>;\r\n    async getActuatorMeta(id1: ID, id2?: ID): Promise<Meta> {\r\n        if(!id2)  {\r\n            var meta = await this.get<Meta>(`actuators/${id1}/meta`);\r\n        } else {\r\n            var meta = await this.get<Meta>(`devices/${id1}/actuators/${id2}/meta`);\r\n        }\r\n        return meta;\r\n    }\r\n\r\n    \r\n    //////////////////////////////////////////////////\r\n    // Apps\r\n\r\n    /**\r\n     * @category Clouds\r\n     */\r\n    getClouds(): Promise<{[id: string]: Cloud}> {\r\n        return this.get<{[id: string]: Cloud}>(\"clouds\");\r\n    }\r\n\r\n    /**\r\n     * @category Clouds\r\n     */\r\n    addCloud(cloud: Cloud): Promise<ID> {\r\n        return this.set<ID>(\"clouds\", cloud);\r\n    }\r\n\r\n    /**\r\n     * @category Clouds\r\n     */\r\n    getCloud(id: ID): Promise<Cloud> {\r\n        return this.get<Cloud>(`clouds/${id}`);\r\n    }\r\n\r\n    /**\r\n     * @category Clouds\r\n     */\r\n    deleteCloud(id: ID) {\r\n        return this.del(`clouds/${id}`);\r\n    }\r\n\r\n    /**\r\n     * @category Clouds\r\n     */\r\n    setCloudPaused(id: ID, paused: boolean) {\r\n        return this.set(`clouds/${id}/paused`, paused);\r\n    }\r\n\r\n    /**\r\n     * @category Clouds\r\n     */\r\n    setCloudCredentials(id: ID, cred: Credentials) {\r\n        return this.set(`clouds/${id}/credentials`, cred);\r\n    }\r\n\r\n    /**\r\n     * @category Clouds\r\n     */\r\n    async getCloudStatus(id: ID): Promise<CloudStatus> {\r\n        var status = await this.get<CloudStatus>(`clouds/${id}/status`);\r\n        polishCloudStatus(status);\r\n        return status;\r\n    }\r\n\r\n    //////////////////////////////////////////////////\r\n    // Apps\r\n\r\n    /**\r\n     * @category Apps\r\n     */\r\n    async getApps(): Promise<App[]> {\r\n        return this.get<App[]>(\"apps\");\r\n    }\r\n\r\n    /**\r\n     * @category Apps\r\n     */\r\n    toProxyURL(app: string, path: string) {\r\n        return `${this.host}/apps/${app}/${path}`;\r\n    }\r\n\r\n    //////////////////////////////////////////////////\r\n    // Generic API\r\n\r\n    /**\r\n     * @category Generic API\r\n     */\r\n    toURL(path: string) {\r\n        return `${this.host}/${path}`;\r\n    }\r\n\r\n    /**\r\n     * @category Generic API\r\n     */\r\n    async subscribe(path: string, cb: (data: any) => void) {\r\n        return\r\n    }\r\n\r\n     /**\r\n     * @category Generic API\r\n     */\r\n    async unsubscribe(path: string, cb: (data: any) => void) {\r\n        return\r\n    }\r\n\r\n    /**\r\n     * @category Generic API\r\n     */\r\n    async get<T>(path: string) {\r\n        var resp = await univFetch(this.toURL(path));\r\n        if(!resp.ok) {\r\n            if(resp.headers.get(\"Content-Type\").startsWith(\"application/json\")) {\r\n                var data = await resp.json();\r\n                throw data;\r\n            } else {\r\n                var text = await resp.text();\r\n                throw text;\r\n            }\r\n        }\r\n        var data = await resp.json();\r\n        if(!resp.ok) throw data;\r\n        return data as T;\r\n    }\r\n\r\n    async fetch(path: string, init?: RequestInit): Promise<Response> {\r\n        return univFetch(path, init);\r\n    }\r\n\r\n    /**\r\n     * @category Generic API\r\n     */\r\n    async del(path: string) {\r\n        var resp = await univFetch(this.toURL(path), {\r\n            method: \"DELETE\"\r\n        });\r\n        if(!resp.ok) {\r\n            if(resp.headers.get(\"Content-Type\").startsWith(\"application/json\")) {\r\n                var data = await resp.json();\r\n                throw data;\r\n            } else {\r\n                var text = await resp.text();\r\n                throw text;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * @category Generic API\r\n     */\r\n    async set<T=void>(path: string, val: any) {\r\n        var resp = await univFetch(this.toURL(path), {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\"\r\n            },\r\n            body: JSON.stringify(val)\r\n        });\r\n        if(!resp.ok) {\r\n            if(resp.headers.get(\"Content-Type\").startsWith(\"application/json\")) {\r\n                var data = await resp.json();\r\n                throw data;\r\n            } else {\r\n                var text = await resp.text();\r\n                throw text;\r\n            }\r\n        }\r\n        if(resp.headers.get(\"Content-Type\").startsWith(\"application/json\")) {\r\n            var data = await resp.json();\r\n            return data as T;\r\n        }\r\n        return;\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n/** @hidden */\r\nfunction polishEntity(ent: Sensor | Actuator) {\r\n    ent.modified = new Date(ent.modified);\r\n    ent.created = new Date(ent.created);\r\n    ent.time = new Date(ent.time);\r\n}\r\n\r\n/** @hidden */\r\nfunction polishDevice(device: Device) {\r\n    device.created = new Date(device.created);\r\n    device.modified = new Date(device.modified);\r\n    device.sensors.forEach(polishEntity);\r\n    device.actuators.forEach(polishEntity);\r\n}\r\n\r\n/** @hidden */\r\nfunction polishValue(val: ValueWithTime) {\r\n    val.time = new Date(val.time);\r\n}\r\n\r\n/** @hidden */\r\nfunction polishCloudStatus(status: CloudStatus) {\r\n    for(var stat of status) {\r\n        stat.status.remote = new Date(stat.status.remote);\r\n        stat.status.wakeup = new Date(stat.status.wakeup);\r\n    }\r\n}","import * as React from \"react\";\r\nimport * as waziup from \"waziup\";\r\n\r\nimport { IconComp } from \"../Icon\";\r\nimport ontologies from \"../../ontologies.json\";\r\nimport ontologiesSprite from \"../../img/ontologies.svg\";\r\nimport { TimeComp } from \"../Time\";\r\nimport { NumericValueComp } from \"../values/NumericValue\";\r\nimport { LoRaComp } from \"../metas/LoRa\";\r\nimport { field } from \"../../tools\";\r\n\r\ninterface Props {\r\n    ent: waziup.Sensor | waziup.Actuator;\r\n    type: \"sensor\" | \"actuator\";\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\n// class MetaHandlerRegistry {\r\n//     constructor() {\r\n\r\n//     }\r\n\r\n// }\r\n\r\nexport type MetaHandler = new (props: EntProps) => React.Component<EntProps>;\r\n\r\nexport var metaHandler: {\r\n    [meta: string]: MetaHandler[]\r\n} = {\r\n    \"wazigate-lora\": [\r\n        LoRaComp\r\n    ]\r\n}\r\n\r\nexport class EntComp extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false\r\n        }\r\n        this.togglePreview = this.togglePreview.bind(this);\r\n        this.handleValueChange = this.handleValueChange.bind(this);\r\n    }\r\n\r\n    togglePreview() {\r\n        console.log(\"togglePreview\");\r\n        this.setState(state => ({\r\n            open: !state.open\r\n        }));\r\n    }\r\n\r\n    handleValueChange() {\r\n\r\n    }\r\n\r\n    render() {\r\n        var ent = this.props.ent;\r\n        var onts = this.props.type === \"sensor\" ? ontologies.sensingDevices : null;\r\n        var ontKind = onts[ent.kind];\r\n\r\n        if (this.state.open) {\r\n            var kind = (\r\n                <span className=\"ent-kind\">\r\n                    <span className=\"kind-label\">\r\n                        <IconComp className=\"kind-icon\" src={`dist/${ontologiesSprite}#${ontKind.icon}`} />\r\n                        {ontKind.label}\r\n                    </span>\r\n                    <span className=\"kind-unit\">°C</span>\r\n                </span>\r\n            );\r\n\r\n            var Value: new (props: EntProps) => React.Component<EntProps>;\r\n\r\n            switch (ent.kind) {\r\n                default:\r\n                    Value = NumericValueComp;\r\n            }\r\n\r\n            var metas = [];\r\n\r\n            for(var key in ent.meta) {\r\n                if (key in metaHandler) {\r\n                    var handler = metaHandler[key];\r\n                    for(var i = 0; i < handler.length; i++) {\r\n                        var Handler = handler[i];\r\n                        metas.push(<Handler entity={ent} type={this.props.type} changeHandler={this.handleValueChange}/>)\r\n                    }\r\n                }\r\n            }\r\n\r\n            var details = (\r\n                <div className=\"ent-details\">\r\n                    {field(\"Time\", <TimeComp time={ent.time} />)}\r\n                    {field(\"Kind\", kind)}\r\n                    {field(\"Value\", <Value entity={ent} type={this.props.type} changeHandler={this.handleValueChange}/>)}\r\n                    {metas}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"device-ent\">\r\n                <div className={`ent-preview${this.state.open?\" open\":\"\"}`} onClick={this.togglePreview}>\r\n                    <IconComp className=\"ent-icon\" src={`dist/${ontologiesSprite}#${ontKind.icon}`} />\r\n                    <div className=\"ent-name\">{ent.name}</div>\r\n                </div>\r\n                { details }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport interface EntProps {\r\n    entity: waziup.Sensor | waziup.Actuator;\r\n    type: \"sensor\" | \"actuator\";\r\n    changeHandler: () => void;\r\n}","import * as React from \"react\";\r\n\r\ntype Props = {\r\n    src: string;\r\n    className: string;\r\n}\r\n\r\nexport class IconComp extends React.Component<Props> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <svg className={this.props.className}>\r\n                <use xlinkHref={this.props.src}></use>\r\n            </svg>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\n\r\ntype Props = {\r\n    time: Date;\r\n}\r\n\r\nexport class TimeComp extends React.Component<Props> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        var t = this.props.time.getTime();\r\n        var n = new Date().getTime();\r\n        var d = n-t;\r\n        var title = this.props.time.toLocaleString();\r\n        var text = title;\r\n        if (d < 10000) text = \"just now\";\r\n        else if (d < 60000) text = `${Math.round(d/1000)} sec ago`;\r\n        else if (d < 3600000) text = `${Math.round(d/60000)} min ago`;\r\n        else if (d < 86400000) text = `${Math.round(d/3600000)} hours ago`;\r\n        return <span title={title}>{text}</span>;\r\n    }\r\n}","import * as React from \"react\";\r\n\r\nexport function field(label: string, content: JSX.Element) {\r\n    return (\r\n        <div className=\"details-field\">\r\n            <div className=\"details-name\">{label}</div>\r\n            <div className=\"details-value\">{content}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function fieldML(label: string, content: JSX.Element) {\r\n    return (\r\n        <div className=\"details-field\">\r\n            <div className=\"details-name\">{label}</div>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\n\r\ninterface ErrorProps {\r\n    error: any;\r\n}\r\n\r\nexport const ErrorComp = (props: ErrorProps) => {\r\n    var msg = `${props.error}`;\r\n    var match = msg.match(/^.+?\\n/);\r\n    var title = match[0];\r\n    var text = msg.slice(title.length);\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            <h2>{title}</h2>\r\n            <pre>{text}</pre>\r\n        </div>\r\n    );\r\n}","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as waziup from \"waziup\";\r\n\r\nimport { version, branch } from \"./version\";\r\n\r\nimport { DashboardComp } from \"./components/Dashboard\";\r\n\r\nconsole.log(\"Welcome to Wazigate! This is a %s build. %s\", branch, version);\r\n\r\nconst search = new URLSearchParams(window.location.search);\r\nconst isDemo = search.has(\"demo\");\r\n\r\n\r\n// basic UI styles, platform dependant\r\nif (navigator.platform.indexOf(\"Win\") == 0)\r\n    document.body.classList.add(\"windows\");\r\nelse if (navigator.platform.indexOf(\"Mac\") == 0)\r\n    document.body.classList.add(\"mac\");\r\nelse if (navigator.platform.indexOf(\"Linux\") != -1)\r\n    document.body.classList.add(\"linux\");\r\n\r\nwaziup.connect().then(gateway => {\r\n    (window as any)[\"gateway\"] = gateway;\r\n\r\n    if (isDemo) {\r\n        gateway.toURL = (path: string) => `demo/${path}.json`;\r\n        gateway.toProxyURL = (name: string, path: string) => `demo/apps/${name}/${path}`;\r\n    }\r\n    \r\n    ReactDOM.render(\r\n        <DashboardComp/>,\r\n        document.getElementById(\"dashboard\")\r\n    );\r\n})\r\n","module.exports = ReactDOM;","export * from \"./src/connect\";\r\nexport * from \"./src/Waziup\";\r\n","import { Waziup } from \"./Waziup\";\r\n\r\n/**\r\n * Pass this settings to [[connect]].\r\n * You can either connect by username+password or with a connect-token from the cloud or gateway that you want to connect to.\r\n */\r\ninterface ConnectSettings {\r\n    /**\r\n     * Waziup Cloud or Gateway address. This can be a hostname (like \"waziup.io\") or an IP address.\r\n     */\r\n    host?: string;\r\n    /**\r\n     * Your username.\r\n     */\r\n    username?: string;\r\n    /**\r\n     * Your password.\r\n     */\r\n    password?: string;\r\n    /**\r\n     * A connect-token that you got from the cloud or the gateway that you want to connect to.\r\n     */\r\n    token?: string;\r\n}\r\n\r\n/**\r\n * Connect to the Waziup Cloud or to a Wazigate.\r\n * \r\n * From inside an App you don't need to specify any settings:\r\n * \r\n * ```ts\r\n *   var waziup = await require(\"waziup\")\r\n *   var gateway = await waziup.connect();\r\n *   var id = await gateway.getID();\r\n *   console.log(\"This Wazigate has the ID:\", id);\r\n * ```\r\n * \r\n * If you want to connect to the Waziup Cloud or to antother Gateway:\r\n * \r\n * ```ts\r\n *   var Waziup = require(\"waziup\");\r\n *   var cloud = await Waziup.connect({\r\n *     host: \"waziup.io\", // or gateway IP\r\n *     username: \"myUsername\",\r\n *     password: \"myPassword\"\r\n *   });\r\n *   var device = await cloud.getDevice(myDeviceID);\r\n *   console.log(\"The device is:\", device);\r\n * ```\r\n * \r\n * If you got a connect-token from the Cloud or the Gateway, use the token like this:\r\n * \r\n * ```ts\r\n *   var Waziup = require(\"waziup\");\r\n *   var cloud = await Waziup.connect({\r\n *     token: \"mvZfwLueeAXYrhnsPDhV...\",\r\n *   });\r\n *   var value = 47; // measurement value\r\n *   cloud.addValue(myDeviceId, mySensorId, value);\r\n * ```\r\n */\r\nexport async function connect(settings?: ConnectSettings): Promise<Waziup> {\r\n    if (settings) {\r\n        var host = settings.host;\r\n    } else {\r\n        var host = \"\";\r\n    }\r\n    return new Waziup(host, \"\");\r\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nexports.default = global.fetch.bind(global);\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;","\n// Autogenerated by webpack.config.js\nexport const version = \"1.0.0\";\nexport const branch = \"master\";\n","import * as React from \"react\";\r\nimport { DevicesPageComp } from \"./Devices\";\r\nimport { ErrorComp } from \"./Error\";\r\nimport { AppsPageComp } from \"./Apps\";\r\nimport icons from \"../img/icons.svg\";\r\nimport { IconComp } from \"./Icon\";\r\nimport * as waziup from \"waziup\";\r\nimport { AppsProxyComp } from \"./AppsProxy\";\r\nimport { MetaHandler, metaHandler } from \"./devices/Entity\";\r\n\r\ndeclare var gateway: waziup.Waziup;\r\n\r\ntype MenuItem = {\r\n    icon: string;\r\n    label: string;\r\n    href: string;\r\n    items?: MenuItem[];\r\n    target?: string;\r\n}\r\n\r\ninterface State {\r\n    page: string;\r\n    loading: {\r\n        pending: number;\r\n    }\r\n}\r\n\r\nconst appsRegExp = /^#\\/apps\\/([a-zA-Z0-9_-]+)\\/(.+)/;\r\n\r\nvar menu = (item: MenuItem) => {\r\n    return (\r\n        <a key={`${item.label}${item.href}`}className=\"menu-item\" href={item.href} target={item.target||\"_self\"}>\r\n            <IconComp className=\"item-icon\" src={item.icon} />\r\n            <span className=\"item-name\">{item.label}</span>\r\n        </a>\r\n    );\r\n}\r\n\r\ntype WazigatePkg = {\r\n    menu: MenuItem[];\r\n    hook: string;\r\n}\r\n\r\n\r\nexport class DashboardComp extends React.Component<{}, State> {\r\n\r\n    menu: MenuItem[] = [{\r\n        label: \"Dashboard\",\r\n        icon: `dist/${icons}#dashboard`,\r\n        href: \"#/\",\r\n        items: []\r\n    }, {\r\n        label: \"Synchronization\",\r\n        icon: `dist/${icons}#clouds`,\r\n        href: \"#/clouds\",\r\n        items: []\r\n    }];\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.onHandleHashChange = this.onHandleHashChange.bind(this);\r\n        var page = location.hash;\r\n        if (page.length < 2) {\r\n            location.hash = page = \"#/\";\r\n        }\r\n\r\n        this.state = {\r\n            page,\r\n            loading: {\r\n                pending: 0\r\n            },\r\n        }\r\n\r\n        window.addEventListener(\"hashchange\", this.onHandleHashChange, false);\r\n\r\n        this.load();\r\n    }\r\n\r\n    async load() {\r\n        (window as any)[\"dashboard\"] = {\r\n            dashboard: this\r\n        }\r\n\r\n        var apps = await gateway.getApps();\r\n        var pending = apps.length;\r\n        if(pending === 0) {\r\n            this.setState({loading: null});\r\n            return\r\n        }\r\n        this.setState({\r\n            loading: { pending }\r\n        });\r\n        apps.forEach(async app => {\r\n            var file = await gateway.fetch(gateway.toProxyURL(app.name, \"package.json\"), {})\r\n            var pkg = await file.json();\r\n            var wazigatePkg = pkg[\"wazigate\"] as WazigatePkg;\r\n            if (wazigatePkg.menu) {\r\n                this.menu.push(...wazigatePkg.menu);\r\n            }\r\n            if(wazigatePkg.hook) {\r\n                loadHook(app.name, wazigatePkg.hook);\r\n            } else {\r\n                this.completeHook();\r\n            }\r\n        });\r\n    }\r\n\r\n    addMetaHandler(meta: string, handler: MetaHandler) {\r\n        if(meta in metaHandler) {\r\n            metaHandler[meta].push(handler);\r\n        } else {\r\n            metaHandler[meta] = [handler];\r\n        }\r\n    }\r\n\r\n    getMetaHandler(meta: string) {\r\n        return metaHandler[meta] || [];\r\n    }\r\n\r\n    completeHook() {\r\n        if(--this.state.loading.pending === 0) {\r\n            this.setState({loading: null});\r\n        }\r\n    }\r\n\r\n    onHandleHashChange() {\r\n        this.navigate(location.hash);\r\n    }\r\n\r\n    navigate(page: string) {\r\n        this.setState({ page });\r\n    }\r\n\r\n    render() {\r\n        var page = this.state.page;\r\n        var match: RegExpMatchArray;\r\n\r\n        if (this.state.loading) {\r\n            return <div className='loading'>Loading, please wait. Pending: {this.state.loading.pending} apps.</div>\r\n        }\r\n\r\n        if (page == \"#/\") {\r\n            var pageComp = <DevicesPageComp />;\r\n\r\n        } else if (page === \"#/apps\") {\r\n            var pageComp = <AppsPageComp />;\r\n\r\n        }  else if ((match = page.match(appsRegExp))) {\r\n            var pageComp = <AppsProxyComp app={match[1]} path={match[2]} />;\r\n\r\n        } else {\r\n            var pageComp = <ErrorComp error={`Page not found.\\nThere is nothing at \\\"${page}\\\".`} />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <div id=\"menu\">\r\n                    {this.menu.map(menu)}\r\n                </div>\r\n                <div id=\"statusbar\"></div>\r\n                {pageComp}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction loadHook(app: string, hook: string) {\r\n    return new Promise((resolve, reject) => {\r\n        var script = document.createElement(\"script\");\r\n        // var rnd = `${Math.random()}`.slice(2);\r\n        // hooks[rnd] = () => {\r\n        //     delete hooks[rnd];\r\n        //     resolve();\r\n        // }\r\n        // script.setAttribute(\"data-hook\", rnd);\r\n        script.src = gateway.toProxyURL(app, hook);\r\n        document.head.appendChild(script);\r\n    });\r\n}","import * as React from \"react\";\r\nimport { Device, Waziup } from \"waziup\";\r\nimport { DeviceComp } from \"./devices/Device\";\r\nimport { ErrorComp } from \"./Error\";\r\n\r\ndeclare var gateway: Waziup;\r\n\r\ntype State = {\r\n    devices: Device[];\r\n    error: any;\r\n}\r\n\r\nexport class DevicesPageComp extends React.Component<{}, State> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            devices: null,\r\n            error: null\r\n        };\r\n\r\n        gateway.getDevices().then(devices => {\r\n            this.setState({\r\n                devices: devices,\r\n                error: null,\r\n            });\r\n        }, (error) => {\r\n            this.setState({\r\n                devices: null,\r\n                error: error,\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorComp error={this.state.error} />\r\n        }\r\n\r\n        if(!this.state.devices) {\r\n            return <div>Loading... please wait.</div>\r\n        }\r\n\r\n        var devices = this.state.devices.map(\r\n            device => <DeviceComp device={device} key={device.id}></DeviceComp>\r\n        );\r\n\r\n        return (\r\n            <div className=\"devices\">\r\n                <h1 className=\"title\">Devices</h1>\r\n                {devices}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { EntComp } from \"./Entity\";\r\n\r\nimport { Device } from \"waziup\";\r\n\r\ntype State = {\r\n    device: Device;\r\n}\r\ntype Props = {\r\n    device: Device;\r\n}\r\n\r\nexport class DeviceComp extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = this.props;\r\n        this.handleNameClick = this.handleNameClick.bind(this);\r\n    }\r\n\r\n    handleNameClick() {\r\n        var device = this.state.device;\r\n        var newName = prompt(\"Enter new device name:\", device.name);\r\n        if (newName && newName != device.name) {\r\n            this.setState(() => {\r\n                device.name = newName;\r\n                return this.state;\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var device = this.state.device;\r\n        return (\r\n            <div className=\"devices-device\">\r\n                <div className=\"device-name\" onClick={this.handleNameClick}>{device.name}</div>\r\n                {device.sensors.map(sensor => <EntComp key={sensor.id} type=\"sensor\" ent={sensor} />)}\r\n            </div>\r\n        );\r\n    }\r\n}","export default \"img/754a56c6663fde800dc6ec7d27bbfd9a.svg\";","\r\nimport * as React from \"react\";\r\nimport { EntProps } from \"../devices/Entity\";\r\n\r\nexport class NumericValueComp extends React.Component<EntProps> {\r\n\r\n    constructor(props: EntProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <span>\r\n                <input type=\"number\" className=\"ent-value\" onChange={this.props.changeHandler} value={this.props.entity.value}></input>\r\n                <span> °C</span>\r\n            </span>\r\n        );\r\n    }\r\n}","\r\nimport * as React from \"react\";\r\nimport { EntProps } from \"../devices/Entity\";\r\nimport { field, fieldML } from \"../../tools\";\r\nimport { TimeComp } from \"../Time\";\r\n\r\ntype LoRaMeta = {\r\n    deveui: string; // e.g. \"58A0CB000010950F\",\r\n    nwkey: string; // e.g. \"105FB4A2FE7DA8B78D31D2FD01BD3733\",\r\n    appkey: string; // e.g. \"6700FAE34FB7CD31D8A4E1625DA1F7D2\",\r\n    version: string; // e.g. \"1.0.2\",\r\n    activation: \"OTAA\" | \"ABP\"; // e.g. \"OTAA\", \"ABP\"\r\n    activated: Date; // e.g. \"2019-10-14T11:41:10.814Z\",\r\n    appeui: string; // e.g. \"58A0CB0001500000\"\r\n}\r\n\r\nexport class LoRaComp extends React.Component<EntProps> {\r\n\r\n    constructor(props: EntProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        var meta = this.props.entity.meta[\"wazigate-lora\"] as LoRaMeta;\r\n        meta.activated = new Date(meta.activated);\r\n\r\n        return (\r\n            <div className=\"meta-lora\">\r\n                <div className=\"meta-name\">LoRaWAN</div>\r\n                {field(\"LoRaWAN Version:\", <span></span>)}\r\n                {fieldML(\"DEVEUI:\", <input type=\"text\" className=\"lora-id\" value={meta.deveui} onChange={this.props.changeHandler} />)}\r\n                {fieldML(\"NetworkKey:\", <input type=\"text\" className=\"lora-id\" value={meta.nwkey} onChange={this.props.changeHandler} />)}\r\n                {fieldML(\"AppKey:\", <input type=\"text\" className=\"lora-id\" value={meta.appeui} onChange={this.props.changeHandler} />)}\r\n                {field(\"Activated:\", <TimeComp time={meta.activated} />)}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\n\r\nexport class AppsPageComp extends React.Component {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return <div>Apps :D</div>\r\n    }\r\n}","export default \"img/2ee9c0acf05de75425f429762ef8c551.svg\";","import * as React from \"react\";\r\nimport * as waziup from \"waziup\";\r\n\r\ndeclare var gateway: waziup.Waziup;\r\n\r\ninterface Props {\r\n    path: string;\r\n    app: string;\r\n}\r\n\r\nexport const AppsProxyComp = (props: Props) => <iframe className=\"app\" src={gateway.toProxyURL(props.app, props.path)} />;"],"sourceRoot":""}